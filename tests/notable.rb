# Converts the CSV generated by Simple Bank into a CSV understandable by YNAB
require 'csv'

# Which column headers in the Simple CSV match up with the columns headers needed by YNAB
@simple_keywords = ["Date", "Description", "Category", "Memo", "Amount"]
@ynab_keywords   = ["Date", "Payee", "Category", "Memo", "Amount"]

# # Get the csv file from args or prompt user
# ARGV.each do |argument|
#   @csvfile = ARGV[0]
# end

# if ARGV.empty?
#   print "No file detected, enter file name: "
#   @csvfile = gets
# end

# Import csv
@simplecsv = CSV.read('sample-data3.csv') #http://bit.ly/1mSlqfA
puts "\nheaders are #{@simplecsv[0]}"

# Get the 'simple' header indicies
simple_headers = @simple_keywords.map{ |column| @simplecsv[0].index(column)}
puts "simple_headers are #{simple_headers}"

# Create a new array that omits the CSV rows when the value in the 'Pending' column is set to true
@no_pending_array = Array.new()
pending = @simplecsv[0].find_index('Pending')
@simplecsv.each do |row|
  if row[pending].to_s.casecmp('false') == 0
    @no_pending_array.push(row)
  end
end

# Create a new array that only includes the YNAB columns
@ynab_array = Array.new()
@no_pending_array.each do |row| #Itterate over every row in new 'pending free' array
    newrow = Array.new() #Create a temporary array
    simple_headers.each do | desired_index | #Itterate over each of the columsn we want e.g. [0, 7, 9, 16, 3]
      newrow.push(row[desired_index]) #Add the new value to the temporary array
    end
   @ynab_array.push(newrow) #Add each row to the new YNAB array
end

# Replace the headers with the YNAB headers
@ynab_array[0] = @ynab_keywords

# Save to file
CSV.open('ynab.csv','w') do |csv|
  @ynab_array.each do | row |
    csv << row
  end
end